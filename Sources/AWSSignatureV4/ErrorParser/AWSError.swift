public enum AWSError: String {
    case accessDenied = "AccessDenied"
    case accountProblem = "AccountProblem"
    case ambiguousGrantByEmailAddress = "AmbiguousGrantByEmailAddress"
    case authFailure = "AuthFailure"
    case authorizationHeaderMalformed = "AuthorizationHeaderMalformed"
    case badDigest = "BadDigest"
    case bucketAlreadyExists = "BucketAlreadyExists"
    case bucketAlreadyOwnedByYou = "BucketAlreadyOwnedByYou"
    case bucketNotEmpty = "BucketNotEmpty"
    case credentialsNotSupported = "CredentialsNotSupported"
    case crossLocationLoggingProhibited = "CrossLocationLoggingProhibited"
    case entityTooSmall = "EntityTooSmall"
    case entityTooLarge = "EntityTooLarge"
    case expiredToken = "ExpiredToken"
    case illegalVersioningConfigurationException = "IllegalVersioningConfigurationException"
    case incompleteBody = "IncompleteBody"
    case incorrectNumberOfFilesInPostRequest = "IncorrectNumberOfFilesInPostRequest"
    case inlineDataTooLarge = "InlineDataTooLarge"
    case internalError = "InternalError"
    case invalidAccessKeyId = "InvalidAccessKeyId"
    case invalidAddressingHeader = "InvalidAddressingHeader"
    case invalidArgument = "InvalidArgument"
    case invalidBucketName = "InvalidBucketName"
    case invalidDigest = "InvalidDigest"
    case invalidEncryptionAlgorithmError = "InvalidEncryptionAlgorithmError"
    case invalidLocationConstraint = "InvalidLocationConstraint"
    case invalidObjectState = "InvalidObjectState"
    case invalidPart = "InvalidPart"
    case invalidPartOrder = "InvalidPartOrder"
    case invalidPayer = "InvalidPayer"
    case invalidPolicyDocument = "InvalidPolicyDocument"
    case invalidRange = "InvalidRange"
    case invalidRequest = "InvalidRequest"
    case invalidSecurity = "InvalidSecurity"
    case invalidSOAPRequest = "InvalidSOAPRequest"
    case invalidStorageClass = "InvalidStorageClass"
    case invalidTargetBucketForLogging = "InvalidTargetBucketForLogging"
    case invalidToken = "InvalidToken"
    case invalidURI = "InvalidURI"
    case keyTooLong = "KeyTooLong"
    case malformedACLError = "MalformedACLError"
    case malformedPOSTRequest = "MalformedPOSTRequest"
    case malformedXML = "MalformedXML"
    case maxMessageLengthExceeded = "MaxMessageLengthExceeded"
    case maxPostPreDataLengthExceededError = "MaxPostPreDataLengthExceededError"
    case metadataTooLarge = "MetadataTooLarge"
    case methodNotAllowed = "MethodNotAllowed"
    case missingAttachment = "MissingAttachment"
    case missingContentLength = "MissingContentLength"
    case missingRequestBodyError = "MissingRequestBodyError"
    case missingSecurityElement = "MissingSecurityElement"
    case missingSecurityHeader = "MissingSecurityHeader"
    case noLoggingStatusForKey = "NoLoggingStatusForKey"
    case noSuchBucket = "NoSuchBucket"
    case noSuchKey = "NoSuchKey"
    case noSuchLifecycleConfiguration = "NoSuchLifecycleConfiguration"
    case noSuchUpload = "NoSuchUpload"
    case noSuchVersion = "NoSuchVersion"
    case notImplemented = "NotImplemented"
    case notSignedUp = "NotSignedUp"
    case noSuchBucketPolicy = "NoSuchBucketPolicy"
    case operationAborted = "OperationAborted"
    case peramentRedirect = "PeramentRedirect"
    case preconditionFailed = "PreconditionFailed"
    case redirect = "Redirect"
    case restoreAlreadyInProgress = "RestoreAlreadyInProgress"
    case requestIsNotMultiPartContent = "RequestIsNotMultiPartContent"
    case requestTimeout = "RequestTimeout"
    case requestTimeTooSkewed = "RequestTimeTooSkewed"
    case requestTorrentOfBucketError = "RequestTorrentOfBucketError"
    case signatureDoesNotMatch = "SignatureDoesNotMatch"
    case serviceUnavailable = "ServiceUnavailable"
    case slowDown = "SlowDown"
    case temporaryRedirect = "TemporaryRedirect"
    case tokenRefreshRequired = "TokenRefreshRequired"
    case tooManyBuckets = "TooManyBuckets"
    case unexpectedContent = "UnexpectedContent"
    case unresolvableGrantByEmailAddress = "UnresolvableGrantByEmailAddress"
    case userKeyMustBeSpecified = "UserKeyMustBeSpecified"
}

extension AWSError: Error {
}
